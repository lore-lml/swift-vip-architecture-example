//
//  CharacterList.swift
//  vip_architecture_example
//
//  Created by Lorenzo Limoli on 29/06/22.
//  Copyright (c) 2022 Lorenzo Limoli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//  https://github.com/lore-lml

import Foundation

enum CharacterList {
    
    enum ListType{
        case house(HpHouse)
        case students
        case staff
    }
    
    typealias Input = ListType
}

// MARK: Route data passing
extension CharacterList{
    struct CharacterDetailDataPassing{
        let character: DtoHpCharacterDetail
        let characterImg: Data?
    }
}

// MARK: VIP - USE CASES
extension CharacterList{
    // type `usecases` for magic
    struct FetchCharacters {
        
        struct Request{
            let listType: ListType
        }
        
        struct Response{
            let characters: [DtoHpCharacter]
        }
        
        struct ViewModel {
            internal init(dtoCharacter: DtoHpCharacter, isLoading: Bool, imageData: Data? = nil) {
                self.dtoCharacter = dtoCharacter
                self.isLoading = isLoading
                self.imageData = imageData
            }
            
            let dtoCharacter: DtoHpCharacter
            var name: String{ dtoCharacter.name }
            var house: String{ dtoCharacter.house.rawValue }
            var isLoading: Bool
            var imageData: Data?
            
        }
    }
    
    struct FetchCharacterImage {
        
        struct Request{
            let cellIndex: IndexPath
            let dtoCharacter: DtoHpCharacter
        }
        
        struct Response {
            let cellIndex: IndexPath
            let characterImg: Data?
        }
        
        struct ViewModel {
            let cellIndex: IndexPath
            let characterImg: Data?
        }
    }
    
    struct ShowCharacterDetail {
        
        struct Request {
            let cellIndex: IndexPath
            let dtoCharacter: DtoHpCharacter
        }
        
        struct Response{
            let studentImg: Data?
            let detail: DtoHpCharacterDetail
        }
        
        struct ViewModel{
            let character: DtoHpCharacterDetail
            let characterImg: Data?
        }
    }
    
    struct ShowError {
        
        struct Response {
            let error: Error
        }
        
        struct ViewModel {
            let description: String
        }
    }
}
