//
//  CharacterListSceneViewController.swift
//  vip_architecture_example
//
//  Created by Lorenzo Limoli on 29/06/22.
//  Copyright (c) 2022 Lorenzo Limoli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//  https://github.com/lore-lml

import UIKit

// MARK: Controller Delegate
protocol ICharacterListSceneDelegate: AnyObject{
    func didReceiveFetchCharactersViewModel(_ vms: [CharacterListSceneModels.FetchCharacters.ViewModel])
    func didReceiveFetchCharacterImageViewModel(_ vm: CharacterListSceneModels.FetchCharacterImage.ViewModel)
    func didReceiveError(_ errorVm: CharacterListSceneModels.ShowError.ViewModel)
    func showCharacterDetail(_ detail: CharacterListSceneModels.ShowCharacterDetail.ViewModel)
}

class CharacterListSceneViewController: UIViewController {
    
    var router: ICharacterListSceneRouter!
    var interactor: ICharacterListSceneInteractor!
    var input: CharacterListSceneModels.Input!
    
    // MARK: OUTLETS
    @IBOutlet weak var tableView: UITableView!
    
    private var _loadingView: LoadingView?
    private var _characters: [CharacterListSceneModels.FetchCharacters.ViewModel] = []
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        if !isModal{
            NavBarCustomizer.defaultStyle(for: self)
        }else{
            let btnItem = UIBarButtonItem(barButtonSystemItem: .close, target: self, action: #selector(_didTapClose))
            NavBarCustomizer.defaultStyle(for: self, leftBarButton: btnItem, hideBackButton: true)
        }
        
        _loadingView = .loadView(into: self.view, autoPlay: false)
        _configureTableView()
        _fetchCharacters()
    }
    
    private func _configureTableView(){
        tableView.delegate = self
        tableView.dataSource = self
        CharacterTableViewCell.subscribe(to: tableView)
    }
    
    @objc private func _didTapClose(){
        router.dismissIfModal()
    }
}

extension CharacterListSceneViewController: UITableViewDelegate, UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        _characters.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: CharacterTableViewCell.cellId, for: indexPath) as! CharacterTableViewCell
        
        let character = _characters[indexPath.row]
        cell.configure(character: character)
        
        
        _fetchCharacterImage(.init(cellIndex: indexPath, dtoCharacter: character.dtoCharacter))
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        _showCharacterDetailRequest(
            .init(
                cellIndex: indexPath,
                dtoCharacter: _characters[indexPath.row].dtoCharacter
            )
        )
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
}

extension CharacterListSceneViewController: ICharacterListSceneDelegate{
    private func _fetchCharacters(){
        _loadingView?.play()
        interactor.fetchCharactersRequest(input)
    }
    func didReceiveFetchCharactersViewModel(_ vms: [CharacterListSceneModels.FetchCharacters.ViewModel]) {
        self._characters = vms
        tableView.reloadData()
        _loadingView?.stop()
    }
    
    
    private func _fetchCharacterImage(_ request: CharacterListSceneModels.FetchCharacterImage.Request){
        interactor.fetchCharacterImageRequest(request)
    }
    func didReceiveFetchCharacterImageViewModel(_ vm: CharacterListSceneModels.FetchCharacterImage.ViewModel) {
        guard let img = vm.characterImg else { return }
        
        var studentVm = _characters[vm.cellIndex.row]
        studentVm.isLoading = false
        studentVm.image = img
        
        _characters[vm.cellIndex.row] = studentVm
        
        (tableView.cellForRow(at: vm.cellIndex) as? CharacterTableViewCell)?
            .configure(character: studentVm)
    }
    
    func didReceiveError(_ errorVm: CharacterListSceneModels.ShowError.ViewModel) {
//        Log.e(errorVm.description)
    }
    
    
    private func _showCharacterDetailRequest(_ request: CharacterListSceneModels.ShowCharacterDetail.Request){
        interactor.showCharacterDetailRequest(request)
    }
    func showCharacterDetail(_ detail: CharacterListSceneModels.ShowCharacterDetail.ViewModel) {
        self.router.showCharacterDetail(detail)
    }
}
